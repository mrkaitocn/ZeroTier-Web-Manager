import { Redis } from '@upstash/redis';

// --- L·∫§Y C√ÅC BI·∫æN M√îI TR∆Ø·ªúNG ---
const ztToken = process.env.ZT_TOKEN;
const networkId = process.env.ZT_NETWORK_ID; // C·∫ßn th√™m bi·∫øn n√†y!
const notifyMemberIds = process.env.ZT_NOTIFY_MEMBER_IDS;
const pushoverUserKey = process.env.PUSHOVER_USER_KEY;
const pushoverApiToken = process.env.PUSHOVER_API_TOKEN;

// --- KH·ªûI T·∫†O REDIS ---
const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

// --- H√ÄM G·ª¨I TH√îNG B√ÅO PUSHOVER ---
async function sendPushoverMessage(title, message) {
    if (!pushoverUserKey || !pushoverApiToken) return;
    console.log(`ƒêang g·ª≠i Pushover: ${title}`);
    await fetch('https://api.pushover.net/1/messages.json', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            token: pushoverApiToken,
            user: pushoverUserKey,
            title: title,
            message: message,
            sound: 'bike', // √Çm thanh khi online
        }),
    });
}

// --- H√ÄM X·ª¨ L√ù CH√çNH ƒê∆Ø·ª¢C L√äN L·ªäCH ---
export const handler = async () => {
    console.log(`\n--- B·∫Øt ƒë·∫ßu phi√™n ki·ªÉm tra ƒë·ªãnh k·ª≥ l√∫c: ${new Date().toLocaleString('vi-VN')} ---`);

    if (!ztToken || !networkId) {
        console.error("L·ªñI: Thi·∫øu ZT_TOKEN ho·∫∑c ZT_NETWORK_ID trong bi·∫øn m√¥i tr∆∞·ªùng.");
        return { statusCode: 500, body: 'Missing environment variables' };
    }

    try {
        // B∆∞·ªõc 1: G·ªçi API ZeroTier ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ th√†nh vi√™n
        const response = await fetch(`https://api.zerotier.com/api/v1/network/${networkId}/member`, {
            headers: { 'Authorization': `token ${ztToken}` },
        });
        if (!response.ok) {
            throw new Error(`ZeroTier API error: ${response.status}`);
        }
        const members = await response.json();
        console.log(`T√¨m th·∫•y ${members.length} th√†nh vi√™n trong network.`);

        // Danh s√°ch thi·∫øt b·ªã c·∫ßn theo d√µi
        const notifyList = notifyMemberIds ? notifyMemberIds.split(',') : [];

        // B∆∞·ªõc 2: L·∫∑p qua t·ª´ng th√†nh vi√™n ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
        for (const member of members) {
            const memberId = member.nodeId;
            const memberName = member.name || memberId;

            // N·∫øu c√≥ danh s√°ch theo d√µi, ch·ªâ x·ª≠ l√Ω c√°c thi·∫øt b·ªã trong danh s√°ch
            if (notifyList.length > 0 && !notifyList.includes(memberId)) {
                continue; // B·ªè qua thi·∫øt b·ªã n√†y
            }

            const stateKey = `zt-member-state:${memberId}`;
            const lastState = await redis.get(stateKey);

            // M·ªôt thi·∫øt b·ªã ƒë∆∞·ª£c coi l√† "v·ª´a online" n·∫øu lastSeen trong v√≤ng 10 ph√∫t g·∫ßn ƒë√¢y
            // (10 ph√∫t l·ªõn h∆°n chu k·ª≥ ch·∫°y 5 ph√∫t ƒë·ªÉ tr√°nh b·ªè s√≥t)
            const tenMinutesAgo = Date.now() - (10 * 60 * 1000);
            const isConsideredOnline = member.lastSeen > tenMinutesAgo;

            if (isConsideredOnline && lastState !== 'online') {
                // Thi·∫øt b·ªã v·ª´a online!
                console.log(`PH√ÅT HI·ªÜN ONLINE: ${memberName} (${memberId})`);
                await sendPushoverMessage(`‚úÖ Online: ${memberName}`, `Thi·∫øt b·ªã v·ª´a k·∫øt n·ªëi v√†o network.`);
                await redis.set(stateKey, 'online', { ex: 2592000 }); // L∆∞u tr·∫°ng th√°i online
            } else if (!isConsideredOnline && lastState === 'online') {
                // Thi·∫øt b·ªã v·ª´a offline!
                console.log(`PH√ÅT HI·ªÜN OFFLINE: ${memberName} (${memberId})`);
                // B·∫°n c√≥ th·ªÉ g·ª≠i th√¥ng b√°o offline ·ªü ƒë√¢y n·∫øu mu·ªën
                // await sendPushoverMessage(`üîå Offline: ${memberName}`, `Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi.`);
                await redis.set(stateKey, 'offline', { ex: 2592000 }); // L∆∞u tr·∫°ng th√°i offline
            }
        }

        console.log("--- Ho√†n t·∫•t phi√™n ki·ªÉm tra ---");
        return { statusCode: 200, body: 'Check completed.' };

    } catch (error) {
        console.error("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ki·ªÉm tra:", error);
        return { statusCode: 500, body: error.toString() };
    }
};
