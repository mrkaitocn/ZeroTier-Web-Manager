// netlify/functions/zerotier-webhook.js

import { Redis } from '@upstash/redis';
import { Resend } from 'resend';
import crypto from 'crypto';

// --- KH·ªûI T·∫†O C√ÅC CLIENT ---
const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

const resend = new Resend(process.env.RESEND_API_KEY);

// --- L·∫§Y C√ÅC BI·∫æN M√îI TR∆Ø·ªúNG M·ªöI ---
const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
const telegramChatId = process.env.TELEGRAM_CHAT_ID;
const webhookSecret = process.env.ZT_WEBHOOK_SECRET;
const ntfyTopic = process.env.NTFY_TOPIC;
const notifyMemberIds = process.env.ZT_NOTIFY_MEMBER_IDS;


// --- C√ÅC H√ÄM G·ª¨I TH√îNG B√ÅO ---

// H√†m g·ª≠i tin nh·∫Øn Telegram
async function sendTelegramMessage(message) {
  if (!telegramBotToken || !telegramChatId) return;
  const url = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: telegramChatId, text: message, parse_mode: 'Markdown' }),
  });
}

// H√†m g·ª≠i email
async function sendEmail(subject, message) {
  if (!process.env.RESEND_API_KEY) return;
  const toEmail = 'email-nhan-thong-bao@cua-ban.com'; // Thay b·∫±ng email c·ªßa b·∫°n
  if (!toEmail.includes('@')) return; // B·ªè qua n·∫øu email ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh
  await resend.emails.send({
    from: 'ZeroTier Notifier <onboarding@resend.dev>',
    to: toEmail,
    subject: subject,
    html: `<p>${message}</p>`,
  });
}

// *** H√ÄM M·ªöI: G·ª¨I TH√îNG B√ÅO NTFY.SH ***
async function sendNtfyMessage(title, message, tags) {
  if (!ntfyTopic) return;
  const url = `https://ntfy.sh/${ntfyTopic}`;
  await fetch(url, {
    method: 'POST',
    body: message,
    headers: {
      'Title': title,
      'Tags': tags, // Th√™m icon cho th√¥ng b√°o
    },
  });
}


// --- H√ÄM B·∫¢O M·∫¨T V√Ä H√ÄM X·ª¨ L√ù CH√çNH ---

async function verifySignature(request) {
  const signature = request.headers.get('x-zerotier-webhook-signature');
  const bodyText = await request.text();
  if (!signature || !webhookSecret) return { isValid: false, body: bodyText };
  const key = await crypto.subtle.importKey('raw', new TextEncoder().encode(webhookSecret), { name: 'HMAC', hash: 'SHA-256' }, false, ['verify']);
  const verified = await crypto.subtle.verify('HMAC', key, Buffer.from(signature, 'hex'), new TextEncoder().encode(bodyText));
  return { isValid: verified, body: bodyText };
}


export default async (request) => {
  if (request.method !== 'POST') {
    return new Response('Method Not Allowed', { status: 405 });
  }

  const { isValid, body: bodyText } = await verifySignature(request);
  if (!isValid) {
    return new Response('Invalid signature', { status: 401 });
  }

  const eventData = JSON.parse(bodyText);
  const { event, member, network } = eventData;
  const memberId = member.id;
  const memberName = member.name || member.id;
  const networkName = network.name || network.id;

  // *** LOGIC L·ªåC THI·∫æT B·ªä THEO DANH S√ÅCH ***
  // N·∫øu bi·∫øn m√¥i tr∆∞·ªùng c√≥ t·ªìn t·∫°i V√Ä memberId hi·ªán t·∫°i kh√¥ng n·∫±m trong danh s√°ch ƒë√≥
  if (notifyMemberIds && !notifyMemberIds.split(',').includes(memberId)) {
    console.log(`B·ªè qua th√¥ng b√°o cho thi·∫øt b·ªã ${memberName} (${memberId}) v√¨ kh√¥ng c√≥ trong danh s√°ch theo d√µi.`);
    return new Response('Member not in notification list. Skipped.', { status: 200 });
  }

  const stateKey = `zt-member-state:${memberId}`;
  
  try {
    const lastState = await redis.get(stateKey);
    let subject = '';
    let message = '';
    let ntfyTitle = '';
    let ntfyTags = '';
    let ntfyMessage = '';

    if (event === 'MEMBER_ONLINE' && lastState !== 'online') {
      subject = `[ZeroTier] Online: ${memberName}`;
      message = `Thi·∫øt b·ªã "${memberName}" v·ª´a online tr√™n network "${networkName}".`;
      ntfyTitle = `‚úÖ Online: ${memberName}`;
      ntfyTags = 'white_check_mark';
      ntfyMessage = `Network: ${networkName}\nID: ${memberId}`;

      await redis.set(stateKey, 'online', { ex: 2592000 });
      // G·ª≠i ƒë·ªìng th·ªùi c·∫£ 3 lo·∫°i th√¥ng b√°o
      await Promise.all([
        sendTelegramMessage(`‚úÖ *Online:* ${memberName}\n*Network:* ${networkName}`), 
        sendEmail(subject, message),
        sendNtfyMessage(ntfyTitle, ntfyMessage, ntfyTags)
      ]);

    } else if (event === 'MEMBER_OFFLINE' && lastState !== 'offline') {
      subject = `[ZeroTier] Offline: ${memberName}`;
      message = `Thi·∫øt b·ªã "${memberName}" v·ª´a offline tr√™n network "${networkName}".`;
      ntfyTitle = `üîå Offline: ${memberName}`;
      ntfyTags = 'electric_plug';
      ntfyMessage = `Network: ${networkName}\nID: ${memberId}`;

      await redis.set(stateKey, 'offline', { ex: 2592000 });
      await Promise.all([
        sendTelegramMessage(`üîå *Offline:* ${memberName}\n*Network:* ${networkName}`), 
        sendEmail(subject, message),
        sendNtfyMessage(ntfyTitle, ntfyMessage, ntfyTags)
      ]);
    }
    
    return new Response('Webhook processed', { status: 200 });

  } catch (error) {
    console.error('Error processing webhook:', error);
    return new Response('Internal Server Error', { status: 500 });
  }
};
