function formatTimeAgo(timestamp) { if (!timestamp || timestamp === 0) return 'Ch∆∞a bao gi·ªù'; const now = new Date(); const seenTime = new Date(timestamp); const seconds = Math.floor((now - seenTime) / 1000); if (seconds < 60) return "V√†i gi√¢y tr∆∞·ªõc"; const minutes = Math.floor(seconds / 60); if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`; const hours = Math.floor(minutes / 60); if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`; const days = Math.floor(hours / 24); if (days < 30) return `${days} ng√†y tr∆∞·ªõc`; return seenTime.toLocaleDateString('vi-VN'); }

document.addEventListener('DOMContentLoaded', () => {
    const networkSelect = document.getElementById('network-select');
    const memberList = document.getElementById('member-list');
    const memberHeader = document.getElementById('member-header');
    const loading = document.getElementById('loading-indicator');

    // === THAY ƒê·ªîI 1: Khai b√°o bi·∫øn ƒë·ªÉ l∆∞u ID c·ªßa b·ªô ƒë·∫øm th·ªùi gian ===
    let refreshIntervalId = null;

    const showLoading = (isLoading) => { loading.style.display = isLoading ? 'block' : 'none'; if (isLoading) { memberHeader.style.display = 'none'; memberList.innerHTML = ''; } };

    const loadNetworks = async () => {
        showLoading(true);
        networkSelect.disabled = true;
        try {
            const response = await fetch('/.netlify/functions/get-networks');
            if (!response.ok) throw new Error(`Server responded with ${response.status}`);
            const networks = await response.json();
            networkSelect.innerHTML = '<option selected disabled>Ch·ªçn m·ªôt network...</option>';
            networks.forEach(net => {
                const option = document.createElement('option');
                option.value = net.id;
                option.textContent = `${net.config.name || 'Unnamed Network'} (${net.id})`;
                networkSelect.appendChild(option);
            });
            networkSelect.disabled = false;
            if (networks.length === 1) {
                networkSelect.selectedIndex = 1;
                networkSelect.dispatchEvent(new Event('change'));
            }
        } catch (error) {
            console.error('Error loading networks:', error);
            alert('Failed to load networks.');
        }
        showLoading(false);
    };

    const loadMembers = async (networkId, isBackgroundRefresh = false) => {
        // N·∫øu kh√¥ng ph·∫£i l√† l√†m m·ªõi d∆∞·ªõi n·ªÅn, hi·ªÉn th·ªã loading
        if (!isBackgroundRefresh) {
            showLoading(true);
        }
        
        try {
            const response = await fetch(`/.netlify/functions/get-members?networkId=${networkId}`);
            if (!response.ok) throw new Error(`Server responded with ${response.status}`);
            const members = await response.json();
            
            memberList.innerHTML = '';
            memberHeader.style.display = 'block';
            if (members.length === 0) {
                memberList.innerHTML = '<li class="list-group-item">Kh√¥ng c√≥ th√†nh vi√™n n√†o trong network n√†y.</li>';
                return;
            }
            members.sort((a, b) => (a.name || a.nodeId).localeCompare(b.name || b.nodeId));

            members.forEach(member => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                const name = member.name || 'Ch∆∞a ƒë·∫∑t t√™n';
                const ip = member.config.ipAssignments ? member.config.ipAssignments.join(', ') : 'Ch∆∞a c√≥ IP';
                const authorizedStatus = member.config.authorized;
                const lastSeen = member.lastSeen;
                const physicalAddress = member.physicalAddress ? member.physicalAddress.split('/')[0] : 'N/A';
                const location = member.location;
                let locationString = 'Kh√¥ng r√µ v·ªã tr√≠';
                if (location && location.city) {
                    locationString = `${location.city}, ${location.country}`;
                }
                const org = location ? location.org : null;
                let providerString = 'Kh√¥ng r√µ';
                if (org) {
                    providerString = org;
                }
                li.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start flex-wrap">
                        <div class="me-3 mb-2">
                            <strong>${name}</strong>
                            <br><small class="text-muted">${member.nodeId}</small>
                            <br><small>IP ·∫£o: ${ip}</small>
                            <br><small class="text-info">Physical IP: ${physicalAddress}</small>
                            <br><small class="text-primary">üìç V·ªã tr√≠: ${locationString}</small>
                            <br><small class="text-secondary">üè¢ Nh√† cung c·∫•p: ${providerString}</small>
                            <br><small class="text-success">Last Seen: ${formatTimeAgo(lastSeen)}</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <span class="me-3 authorized-${authorizedStatus}">${authorizedStatus ? 'ƒê√£ duy·ªát' : 'Ch∆∞a duy·ªát'}</span>
                            <button class="btn btn-sm ${authorizedStatus ? 'btn-outline-danger' : 'btn-outline-success'}" data-member-id="${member.nodeId}" data-authorize="${!authorizedStatus}">
                                ${authorizedStatus ? 'H·ªßy duy·ªát' : 'Duy·ªát'}
                            </button>
                        </div>
                    </div>
                `;
                memberList.appendChild(li);
            });
        } catch (error) {
            console.error('Error loading members:', error);
            // Ch·ªâ th√¥ng b√°o l·ªói khi ng∆∞·ªùi d√πng ch·ªß ƒë·ªông t·∫£i, kh√¥ng th√¥ng b√°o khi l√†m m·ªõi d∆∞·ªõi n·ªÅn
            if (!isBackgroundRefresh) {
                alert('Failed to load members.');
            }
        }
        // Lu√¥n t·∫Øt loading sau khi ho√†n t·∫•t
        showLoading(false);
    };

    const toggleAuthorization = async (networkId, memberId, shouldAuthorize) => {
        const button = document.querySelector(`button[data-member-id='${memberId}']`);
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
        try {
            await fetch('/.netlify/functions/authorize-member', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ networkId, memberId, authorize: shouldAuthorize }) });
            // Sau khi duy·ªát, t·∫£i l·∫°i danh s√°ch ngay l·∫≠p t·ª©c
            await loadMembers(networkId); 
        } catch (error) {
            console.error('Error updating member:', error);
            alert('Failed to update member.');
            button.disabled = false;
        }
    };

    // === THAY ƒê·ªîI 2: C·∫≠p nh·∫≠t s·ª± ki·ªán 'change' c·ªßa network select ===
    networkSelect.addEventListener('change', () => {
        const networkId = networkSelect.value;
        if (!networkId || networkId === 'Ch·ªçn m·ªôt network...') return;

        // T·∫£i danh s√°ch th√†nh vi√™n ngay l·∫≠p t·ª©c khi ch·ªçn
        loadMembers(networkId);

        // X√≥a b·ªô ƒë·∫øm c≈© tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu c√°i m·ªõi ƒë·ªÉ tr√°nh ch·∫°y nhi·ªÅu l·∫ßn
        if (refreshIntervalId) {
            clearInterval(refreshIntervalId);
            console.log('ƒê√£ d·ª´ng b·ªô ƒë·∫øm th·ªùi gian l√†m m·ªõi c≈©.');
        }

        // B·∫Øt ƒë·∫ßu m·ªôt b·ªô ƒë·∫øm m·ªõi ƒë·ªÉ t·ª± ƒë·ªông l√†m m·ªõi sau m·ªói 5 ph√∫t (300,000 mili gi√¢y)
        const refreshInterval = 5 * 60 * 1000;
        refreshIntervalId = setInterval(() => {
            console.log(`T·ª± ƒë·ªông l√†m m·ªõi danh s√°ch th√†nh vi√™n l√∫c ${new Date().toLocaleTimeString('vi-VN')}`);
            // G·ªçi h√†m loadMembers v·ªõi tham s·ªë th·ª© hai l√† true ƒë·ªÉ ch·ªâ ƒë·ªãnh ƒë√¢y l√† l√†m m·ªõi d∆∞·ªõi n·ªÅn
            loadMembers(networkId, true);
        }, refreshInterval);
        
        console.log(`ƒê√£ b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông l√†m m·ªõi sau m·ªói 5 ph√∫t cho network ${networkId}.`);
    });

    memberList.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (button) {
            const memberId = button.dataset.memberId;
            const shouldAuthorize = button.dataset.authorize === 'true';
            const networkId = networkSelect.value;
            toggleAuthorization(networkId, memberId, shouldAuthorize);
        }
    });

    loadNetworks();
});
