// === H√ÄM H·ªñ TR·ª¢ ƒê·ªäNH D·∫†NG TH·ªúI GIAN ===
function formatTimeAgo(timestamp) {
    if (!timestamp || timestamp === 0) {
        return 'Ch∆∞a bao gi·ªù';
    }
    const now = new Date();
    const seenTime = new Date(timestamp);
    const seconds = Math.floor((now - seenTime) / 1000);
    if (seconds < 60) return "V√†i gi√¢y tr∆∞·ªõc";
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
    const days = Math.floor(hours / 24);
    if (days < 30) return `${days} ng√†y tr∆∞·ªõc`;
    return seenTime.toLocaleDateString('vi-VN');
}

document.addEventListener('DOMContentLoaded', () => {
    // ... (C√°c h·∫±ng s·ªë gi·ªØ nguy√™n)
    const networkSelect = document.getElementById('network-select');
    const memberList = document.getElementById('member-list');
    const memberHeader = document.getElementById('member-header');
    const loading = document.getElementById('loading-indicator');

    const showLoading = (isLoading) => {
        loading.style.display = isLoading ? 'block' : 'none';
        if (isLoading) {
            memberHeader.style.display = 'none';
            memberList.innerHTML = '';
        }
    };

    const loadNetworks = async () => {
        // ... (H√†m n√†y gi·ªØ nguy√™n, kh√¥ng c·∫ßn s·ª≠a)
        showLoading(true);
        networkSelect.disabled = true;
        try {
            const response = await fetch('/.netlify/functions/get-networks');
            if (!response.ok) {
                throw new Error(`Server responded with ${response.status}`);
            }
            const networks = await response.json();
            networkSelect.innerHTML = '<option selected disabled>Ch·ªçn m·ªôt network...</option>';
            networks.forEach(net => {
                const option = document.createElement('option');
                option.value = net.id;
                option.textContent = `${net.config.name || 'Unnamed Network'} (${net.id})`;
                networkSelect.appendChild(option);
            });
            networkSelect.disabled = false;
        } catch (error) {
            console.error('Error loading networks:', error);
            alert('Failed to load networks. Vui l√≤ng ki·ªÉm tra l·∫°i Console (F12) ƒë·ªÉ xem chi ti·∫øt l·ªói.');
        }
        showLoading(false);
    };

    // === H√ÄM loadMembers ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ===
    const loadMembers = async (networkId) => {
        showLoading(true);
        try {
            const response = await fetch(`/.netlify/functions/get-members?networkId=${networkId}`);
            if (!response.ok) {
                throw new Error(`Server responded with ${response.status}`);
            }
            const members = await response.json();
            
            memberList.innerHTML = '';
            memberHeader.style.display = 'block';

            if (members.length === 0) {
                memberList.innerHTML = '<li class="list-group-item">Kh√¥ng c√≥ th√†nh vi√™n n√†o trong network n√†y.</li>';
                return;
            }

            members.sort((a, b) => (a.name || a.nodeId).localeCompare(b.name || b.nodeId));

            members.forEach(member => {
                const li = document.createElement('li');
                li.className = 'list-group-item d-flex justify-content-between align-items-center flex-wrap';

                const name = member.name || 'Ch∆∞a ƒë·∫∑t t√™n';
                const ip = member.config.ipAssignments ? member.config.ipAssignments.join(', ') : 'Ch∆∞a c√≥ IP';
                const authorizedStatus = member.config.authorized;
                const lastSeen = member.lastSeen;
                const physicalAddress = member.physicalAddress ? member.physicalAddress.split('/')[0] : 'N/A';
                
                // L·∫•y th√¥ng tin v·ªã tr√≠ t·ª´ d·ªØ li·ªáu backend ƒë√£ g·ªôp
                const location = member.location;
                let locationString = 'Kh√¥ng r√µ v·ªã tr√≠';
                if (location && location.city) {
                    // T·∫°o chu·ªói hi·ªÉn th·ªã v·ªã tr√≠: "Hanoi, VN"
                    locationString = `${location.city}, ${location.country}`;
                }

                li.innerHTML = `
                    <div class="me-3 mb-2">
                        <strong>${name}</strong>
                        <br>
                        <small class="text-muted">${member.nodeId}</small>
                        <br>
                        <small>IP ·∫£o: ${ip}</small>
                        <br>
                        <small class="text-info">Physical IP: ${physicalAddress}</small>
                        <br>
                        <small class="text-primary">üìç V·ªã tr√≠: ${locationString}</small>
                        <br>
                        <small class="text-success">Last Seen: ${formatTimeAgo(lastSeen)}</small>
                    </div>
                    <div class="d-flex align-items-center">
                         <span class="me-3 authorized-${authorizedStatus}">${authorizedStatus ? 'ƒê√£ duy·ªát' : 'Ch∆∞a duy·ªát'}</span>
                        <button class="btn btn-sm ${authorizedStatus ? 'btn-outline-danger' : 'btn-outline-success'}" 
                                data-member-id="${member.nodeId}" 
                                data-authorize="${!authorizedStatus}">
                            ${authorizedStatus ? 'H·ªßy duy·ªát' : 'Duy·ªát'}
                        </button>
                    </div>
                `;
                memberList.appendChild(li);
            });
        } catch (error) {
            console.error('Error loading members:', error);
            alert('Failed to load members.');
        }
        showLoading(false);
    };

    // ... (C√°c h√†m v√† event listener c√≤n l·∫°i gi·ªØ nguy√™n)
    const toggleAuthorization = async (networkId, memberId, shouldAuthorize) => {
        const button = document.querySelector(`button[data-member-id='${memberId}']`);
        button.disabled = true;
        button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
        try {
            const response = await fetch('/.netlify/functions/authorize-member', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    networkId: networkId,
                    memberId: memberId,
                    authorize: shouldAuthorize,
                }),
            });
            if (!response.ok) throw new Error('Failed to update member status.');
            await loadMembers(networkId);
        } catch (error) {
            console.error('Error updating member:', error);
            alert('Failed to update member.');
            button.disabled = false;
        }
    };
    networkSelect.addEventListener('change', () => {
        const networkId = networkSelect.value;
        if (networkId && networkId !== 'Ch·ªçn m·ªôt network...') {
            loadMembers(networkId);
        }
    });
    memberList.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (button) {
            const memberId = button.dataset.memberId;
            const shouldAuthorize = button.dataset.authorize === 'true';
            const networkId = networkSelect.value;
            toggleAuthorization(networkId, memberId, shouldAuthorize);
        }
    });
    loadNetworks();
});
